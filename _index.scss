//                           _   _
//                          | | | |
//  ___  __ _ ___ ___ ______| |_| |__  _ __ _____      __
// / __|/ _` / __/ __|______| __| '_ \| '__/ _ \ \ /\ / /
// \__ \ (_| \__ \__ \      | |_| | | | | | (_) \ V  V /
// |___/\__,_|___/___/       \__|_| |_|_|  \___/ \_/\_/

$st-errors: ();
$st-debugs: ();
$st-warns: ();

$st-catch: false !default;

@function _nth($list, $n) {
  @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
  @return nth($list, $n);
}

@function error($msg) {
  @if $st-catch { $st-errors: append($st-errors, $msg) !global; @return null; }
  @else { @warn '#{$msg}'; }
}

@function debug($msg) {
  @if $st-catch { $st-debugs: append($st-debugs, $msg) !global; @return null; }
  @else { @debug '#{$msg}'; }
}

@function warn($msg) {
  @if $st-catch { $st-warns: append($st-warns, $msg) !global; @return null; }
  @else { @warn '#{$msg}'; }
}

@mixin error($msg) { @at-root .throw { error: error($msg); } }
@mixin debug($msg) { @at-root .throw { debug: debug($msg); } }
@mixin warn($msg) { @at-root .throw { warn: warn($msg); } }

@function nth-last-error($n: 1) { @return _nth($st-errors, length($st-errors) + 1 - $n) or 'no error calls registered'; }
@function nth-last-debug($n: 1) { @return _nth($st-debugs, length($st-debugs) + 1 - $n) or 'no debug calls registered'; }
@function nth-last-warn($n: 1) { @return _nth($st-warns, length($st-warns) + 1 - $n) or 'no warn calls registered'; }

@function last-error() { @return nth-last-error(); }
@function last-debug() { @return nth-last-debug(); }
@function last-warn() { @return nth-last-warn(); }
