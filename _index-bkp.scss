//                           _   _
//                          | | | |
//  ___  __ _ ___ ___ ______| |_| |__  _ __ _____      __
// / __|/ _` / __/ __|______| __| '_ \| '__/ _ \ \ /\ / /
// \__ \ (_| \__ \__ \      | |_| | | | | | (_) \ V  V /
// |___/\__,_|___/___/       \__|_| |_|_|  \___/ \_/\_/

$throws: ();
$catch-throws: false !default;

@function catch($type, $msg) {
  $msgs: map-get($throws, $type) or ();
  $throws: map-merge($throws, ($type: append($msgs, $msg))) !global;
  @return null;
}

@function error($msg) {
  @if $catch-throws { @return catch('error', $msg); }
  @else { @error '#{$msg}'; }
}

@function warn($msg) {
  @if $catch-throws { @return catch('warn', $msg); }
  @else { @warn '#{$msg}'; }
}

@function debug($msg) {
  @if $catch-throws { @return catch('debug', $msg); }
  @else { @debug '#{$msg}'; }
}

@mixin debug($msg) { @at-root .throw { debug: debug($msg); } }
@mixin warn($msg) { @at-root .throw { warn: warn($msg); } }
@mixin error($msg) { @at-root .throw { error: error($msg); } }

@function last-throw($type) {
  $msgs: map-get($throws, $type);
  @return nth($msgs, length($msgs));
}

@function last-error() { @return last-throw('error'); }
@function last-warn() { @return last-throw('warn'); }
@function last-debug() { @return last-throw('debug'); }